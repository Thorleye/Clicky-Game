{"version":3,"sources":["logo.svg","components/Header/Header.js","components/Navbar/Navbar.js","components/Wrapper/Wrapper.js","components/Friend/Friend.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","Navbar","props","href","message","score","highScore","Wrapper","children","Friend","picked","id","alt","name","src","img","onClick","handleClick","Footer","logo","App","state","friends","shuffle","array","t","i","m","length","Math","floor","random","handleShuffle","shuffledFriends","_this","setState","checkPicked","setScore","newScore","gameReset","indexOf","concat","this","_this2","components_Wrapper_Wrapper","components_Navbar_Navbar","components_Header_Header","map","friend","components_Friend_Friend","key","image","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67d7560a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./Header.css\"\r\n\r\nconst Header = () =>  (\r\n<div className=\"header\">\r\n    <h1>Clicky Game !</h1>\r\n    <h2>Click on an image to earn points, but don't click on any image more than once!</h2>\r\n</div>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./Navbar.css\"\r\n\r\nconst Navbar = props => (\r\n    <nav className = \"navbar\">\r\n        <ul>\r\n            <li><a href =\"/\">Clicky Game</a></li>\r\n            <li>{props.message}</li>\r\n            <li> Score: {props.score} | High Score {props.highScore}</li>\r\n        </ul>\r\n    </nav>\r\n)\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Friend.css\"\r\n\r\nconst Friend = props => (\r\n        <div className=\"img-container\" picked={props.picked}>\r\n            <img className =\"click-item\" id={props.id} alt={props.name} src={props.img} onClick={()=> props.handleClick(props.id)} />\r\n        </div>\r\n)\r\n\r\n\r\nexport default Friend;","import React from \"react\";\r\nimport \"./Footer.css\";\r\nimport logo from \"../../logo.svg\"\r\n\r\nconst Footer = () => (\r\n    <footer className = \"footer\">\r\n        <div>Clicky Game <img id=\"logo\" alt=\"react-logo\" src={logo}></img></div>\r\n    </footer>\r\n)\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport Header from \"./components/Header\";\nimport Navbar from \"./components/Navbar\"\nimport Wrapper from \"./components/Wrapper\";\nimport Friend from \"./components/Friend\";\nimport Footer from \"./components/Footer\";\n\nimport friends from \"./friends.json\"\nimport \"./App.css\"\n\nclass App extends Component { \n\n  state = {\n    friends,\n    score:0,\n    highScore:0,\n    picked: [],\n    message: \"Click an image to begin!\"\n  } \n\n  componentDidMount(){\n    this.handleShuffle();\n  }\n\n  //credit to Fisher-Yates shuffle\n  shuffle = (array) => {\n    var m = array.length, t, i;\n    // While there remain elements to shuffle…\n    while (m) {\n      // Pick a remaining element…\n      i = Math.floor(Math.random() * m--);\n      // And swap it with the current element.\n      t = array[m];\n      array[m] = array[i];\n      array[i] = t;\n    }\n    return array;\n  }\n\n  handleShuffle = () => {\n    let shuffledFriends = this.shuffle(friends)\n    this.setState({friends : shuffledFriends})\n  }\n  \n  handleClick = id =>{\n    this.checkPicked(id)\n  };\n\n  setScore = () => {\n    let newScore = (this.state.score + 1);\n    this.setState({ score: newScore });\n    if (newScore >= this.state.highScore){\n      this.setState({highScore : newScore})\n    }\n    if (newScore === friends.length){\n      this.setState({\n        message: \"Wow! You beat the game\",\n        highScore: \"Perfect!\"\n      })\n    }\n  }\n\n  gameReset = () => {\n    this.setState({\n      score: 0,\n      picked: [],\n      message: \"You picked wrong! Try Again\"\n    });  \n  }\n\n  checkPicked = id => {\n    if (this.state.picked.indexOf(id) === -1){\n      this.setState({ \n        picked: this.state.picked.concat(id),\n        message: \"You picked correctly!\"\n      });\n      this.setScore();\n    } else { \n      this.gameReset();\n    }\n    this.handleShuffle();\n  }\n\n  render() {\n    return(\n      <Wrapper>\n        <Navbar \n        score={this.state.score}\n        highScore={this.state.highScore}\n        message={this.state.message}\n        />\n        <Header />\n        <div className=\"container\">\n        {this.state.friends.map(friend=>(\n          <Friend\n            key={friend.id}\n            id={friend.id}\n            img={friend.image}\n            name={friend.name}\n            handleClick={this.handleClick}      \n          />\n        ))}\n        </div>\n        <Footer />\n      </Wrapper>\n    )\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}